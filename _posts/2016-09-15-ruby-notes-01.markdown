---
layout: post
title: Ruby元编程学习笔记
date:  2016-09-15 12:00:00
author: "Albert"
tags:
    - Ruby
---

> “Ruby的元编程一直是一个充满吸引力的话题，看了两遍《Ruby元编程》，这是第三遍，每一遍都会有不同的收获，此笔记会一直更新下去，除了元编程，还会包括一些平时工作学习中碰到的一些Ruby方面的问题”

Ruby是一门完全面向对象的语言，万物皆对象，根据[面向对象编程](https://zh.wikipedia.org/zh-cn/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1)的思想，对象是类的一个实例，而Ruby中，类也是一个对象，这个概念是能否理解Ruby元编程的关键，例如：
{% highlight ruby %}
class A
end

obj_a = A.new
{% endhighlight %}
此处定义类`A`，obj_a为A的一个实例，即obj_a是`A`的一个对象，但是`A`呢？`A`也是一个对象，`A`是类`Class`的一个实例，换个写法可能会更好理解一点：
{% highlight ruby %}
A = Class.new #=> Class类的一个实例
obj_a = A.new #=> A类的一个实例
{% endhighlight %}
即`A`类是类`Class`的一个对象，此时已经开始接触到`元`思想，即用自己描述自己，而描述一个类的类，通常称为`元类`(metaclass)，不过在Ruby中，元类和普通类并无差别，甚至Ruby还是一个单根的面向对象语言，即所有类都集成自`Object`类，包括上面提到的`Class`类，看下下面这个单元测试的栗子：
{% highlight ruby %}
require 'test/unit'

class MetaTest < Test::Unit::TestCase

  def test_class
    str = String.new
    #str is an instance of the class String
    assert_equal String, str.class
    #the class String is an instance of the class Class
    assert_equal Class, String.class
  end

end
{% endhighlight %}
* * *

*实例变量、方法*

与其他语言一样，Ruby中的对象包含特有的实例变量，不同的对象所包含的实例变量不尽相同，但是同一个类的对象都共享相同的实例方法，也就是说方法是保存在类中，而实例变量是保存在对象中：
{% highlight ruby%}
class B
  def initialize(attr1, attr2)
    @attr_1 = attr1
    @attr_2 = attr2
  end

  def foo
    puts "foo"
  end

  def bar
    puts "bar"
  end
end

obj1 = B.new("a1", "a2")
obj2 = B.new("a3", "a4")
obj1.attr_1 #=> "a1"
obj1.attr_2 #=> "a2"
obj2.attr_1 #=> "a3"
obj2.attr_2 #=> "a4"  //obj1与obj2所包含的实例变量不同

obj1.methods == obj2.methods #=> true //obj1与obj2共享相同的实例方法
{% endhighlight%}

从技术层面上来说，一个对象（实例）只是存储了他的实例变量，以及指向本实例的类的引用，所以实例变量只存在于对象中，也就是当对象创建时，才会被建立，因此，不同的对象所包含的实例变量也不相同，而方法（实例方法（InstanceMethods））是存在于对象所属的类中，即同一个类的所有对象都共享该类的所有实例方法。
![]({{site.baseurl}}/img/in-post/post-ruby-notes/instance-methods-class.png)
* * *  

*类*
* 类也是对象  
* 因为类也是对象，所以所有能应用于对象的皆可应用于类。类和对象一样也有它们自己的类。  
* 像对象一样，类也有自己的方法，对象的方法即是所属类的实例方法。  
* 所有的类有共同的祖先Object类（都是从Object类直接或间接继承而来），而Object类又继承自BasicObject类，Ruby类的根本。  
* 类名是常量(Constant)。  

参考下面代码：
{% highlight ruby%}
#对象的方法即是所属类的实例方法
1.methods == 1.class.instance_methods
#=> true

#继承链
N = Class.new
N.ancestors
#=> [N, Object, Kernel, BasicObject]
N.class
#=> Class
N.superclass
#=> Object
N.superclass.superclass
#=> BasicObject
N.superclass.superclass.superclass
#=> nil
{% endhighlight%}
* * *
*匿名类*

一个匿名类（`Anonymous Class`）也被称为单件类（`Singleton Class`），特征类（`Eigenclass`），鬼魂类（`GhostClass`），元类（`MetaClass`）

* * *
*方法的调用*

当你调用一个方法时，Ruby会做如下的事情：
* 找到这个方法，我们把这个过程叫做方法查找method_lookup
* 执行这个方法，为了执行这个方法，Ruby需要一个伪变量self

* * *
*内省、反射*

在Ruby中，我们完全有能力在执行过程中查看类或对象的信息，我们可以使用`class`、`instance_methods`、`instance_variables`等方法来达到目的，这种技术称为`内省（Introspection）`或者`反射（Reflection）`
{% highlight ruby%}
class A
  def foo
    @var = 'var'
  end
end

obj = A.new
obj #=> #<A:0x000001013834c8>
obj.class #=> A
obj.class.instance_methods(false) #=> [:foo]
obj.foo #=> 'var'
obj #=> #<A:0x000001013834c8 @var="var"> //实例变量@var被放入到调用foo方法的对象obj中
obj.instance_variables #=> [:@var]
{% endhighlight%}
respond_to?方法是反射机制中很重要的一个方法，使用respon_to?方法能够在对象调用某方法前知道该对象是否能够调用此方法，所有对象（包括类）都有此方法。

* * *
*Send方法*

`send`是`Object`类中的实例方法，所有任何继承自Object类的子类的对象都能调用此方法，send方法的第一个参数是你想要调用的方法名，一般用符号（Symbol）表示，剩下的参数直接传递给要调用的方法作为参数，你可以通过`send`方法调用任何方法，甚至是私有（private）方法。

* * *
*define_method*
`define_method`是`module`类的一个私有实例方法，因此`define_method`只用由类或者模块使用。你可以动态的通过`define_method`在receiver（类或者模块）中定义实例方法。而你仅需要传递一个方法名和一个代码块（block）

* * *
*method_missing*

`method_missing`是`kernel`模块中的方法，会在对象调用一个通过方法查找无法找到的方法时被调用，并抛出一个`NoMethodError`的错误，所以在子类中复写此方法可以用来精简代码，当然，此方法的执行效率不是很理想，对性能敏感的项目需要慎用。

{% highlight ruby%}
class Foo
  def go(place)
    puts "go to #{place}"
  end

  def method_missing(name, *args)
    if name =~/^go_to_(.*)/
        go($1)
    else
        super
    end
  end
end

obj = Foo.new
obj.go_to_beijing #=> 'go to beijing'
obj.gotobeijing #=> NoMethodError
{% endhighlight%}

* * *
*remove_method、undef_method*  
`remove_method`和`undef_method`均能移除方法，区别在于：  
* remove_method只能移除当前打开类的scope(作用域)中移除指定的方法，而任何其父累或祖先类中的同名方法依然能够调用。
* undef_method会移除包括当前类在内的其继承链上所有类中的同名方法。

* * *
*instance_eval*  
`instance_eval`是`Object`类提供的一个公开方法，该方法可以被一个实例调用。它提供了可以操作对象的实例变量的途径。
`instance_eval`方法同样可以被`类（Class）`调用（类也是对象），以定义类方法：
{% highlight ruby%}
class A; end
#定义实例方法
A.instance_eval do
  define_method :foo do
    puts "instance method foo"
  end
end

A.new.foo #=> "class methods foo"

A.instance_eval do
  def foo
    puts "class method foo"
  end
end

A.foo #=> "class method foo"
{% endhighlight%}

* * *
*class_eval、module_eval*  
`module_eval`和`class_eval`用于模块和类，而不是对象。`class_eval`是`module_eval`的一个别名。`module_eval`和`class_eval`可以从外部检索类变量。
两种方法都可以在模块和类中定义实例方法，尽管名字不同，但是功能是相同的。
{% highlight ruby%}
class A; end
#定义实例方法
A.class_eval do
  def foo
    puts "instance method foo"
  end
end

A.new.foo #=> "class method foo"

#定义类方法
A.class_eval do
  define_singleton_method :foo do
    def foo
      "class method foo"
    end
  end
end

A.foo #=> "class method foo"
{% endhighlight%}

* * *
*const_get、const_set*  
`const_set`、`const_get`用于操作常量。`const_get`返回指定常量的值。
`const_set`为指定的常量设置指定的值，并返回该对象，如果该常量不存在，则会创建该常量，利用这一特性，我们可以在运行时创建类并实例化其实例。
{% highlight ruby%}
class_name = "foo".capitalize
class_name = Object.const_set(class_name, Class.new)
class_name.class_eval do
  define_method :who do |name, age|
    puts "#{name} ---- #{age}"
  end
end

obj = class_name.new
obj.who("xzh", 18) #=> "xzh ---- 18"
{% endhighlight%}

* * * 
*Blocks（代码块）*  
`块（blocks）`是Ruby中`可调用对象`大家族的一员，这个家族中还有包括像`proc`，`lambda`，这样的对象，它还有一个功能，可以用来控制`作用域（Scope）`，`作用域`是变量和方法可用性范围。  
只有在调用一个方法时，才可以定义一个块。块会直接传递给这个方法，该方法可以用`yield`关键字调用这个块。  
在一个方法里，你可以询问当前的方法调用是否包含块，这可以通过`Kernel#block_given?`方法做到。如果`block_given?`返回false，而方法中又使用了`yield`关键字，就会得到一个运行时错误。  
**代码块是闭包**




